package com.tripplanner.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import jakarta.annotation.PostConstruct;
import jakarta.annotation.PreDestroy;
import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.JsonNode;

/**
 * Service for interacting with Google's Gemini AI model via REST API.
 */
@Service
@org.springframework.boot.autoconfigure.condition.ConditionalOnProperty(
    value = "google.ai.api-key",
    matchIfMissing = false
)
public class GeminiClient {
    
    private static final Logger logger = LoggerFactory.getLogger(GeminiClient.class);
    private static final String GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent";
    
    @Value("${google.ai.api-key}")
    private String apiKey;
    
    @Value("${google.ai.model:gemini-1.5-pro}")
    private String modelName;
    
    @Value("${google.ai.temperature:0.7}")
    private float temperature;
    
    @Value("${google.ai.max-tokens:8192}")
    private int maxTokens;
    
    private HttpClient httpClient;
    private ObjectMapper objectMapper;
    
    @PostConstruct
    public void initialize() {
        logger.info("Initializing Gemini client with model: {}", modelName);
        
        this.httpClient = HttpClient.newBuilder()
                .connectTimeout(Duration.ofSeconds(30))
                .build();
        
        this.objectMapper = new ObjectMapper();
        
        logger.info("Gemini client initialized successfully");
    }
    
    @PreDestroy
    public void cleanup() {
        logger.info("Gemini client cleanup completed");
    }
    
    /**
     * Generate content using Gemini with a simple text prompt.
     */
    public String generateContent(String prompt) {
        return generateContent(prompt, null);
    }
    
    /**
     * Generate content using Gemini with a system prompt and user prompt.
     */
    public String generateContent(String userPrompt, String systemPrompt) {
        try {
            logger.debug("Generating content with Gemini, prompt length: {}", userPrompt.length());
            
            // Build request payload
            String requestBody = buildRequestPayload(userPrompt, systemPrompt);
            
            // Make HTTP request to Gemini API
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(GEMINI_API_URL + "?key=" + apiKey))
                    .header("Content-Type", "application/json")
                    .timeout(Duration.ofSeconds(60))
                    .POST(HttpRequest.BodyPublishers.ofString(requestBody))
                    .build();
            
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            
            if (response.statusCode() != 200) {
                logger.error("Gemini API error: {} - {}", response.statusCode(), response.body());
                throw new RuntimeException("Gemini API error: " + response.statusCode());
            }
            
            // Parse response
            JsonNode responseJson = objectMapper.readTree(response.body());
            JsonNode candidates = responseJson.get("candidates");
            
            if (candidates != null && candidates.isArray() && candidates.size() > 0) {
                JsonNode firstCandidate = candidates.get(0);
                JsonNode content = firstCandidate.get("content");
                JsonNode parts = content.get("parts");
                
                if (parts != null && parts.isArray() && parts.size() > 0) {
                    String generatedText = parts.get(0).get("text").asText();
                    logger.debug("Generated content length: {}", generatedText.length());
                    return generatedText;
                }
            }
            
            logger.warn("No content generated by Gemini");
            return "";
            
        } catch (Exception e) {
            logger.error("Error generating content with Gemini", e);
            throw new RuntimeException("Failed to generate content with Gemini: " + e.getMessage(), e);
        }
    }
    
    /**
     * Build request payload for Gemini API.
     */
    private String buildRequestPayload(String userPrompt, String systemPrompt) throws IOException {
        StringBuilder fullPrompt = new StringBuilder();
        
        if (systemPrompt != null && !systemPrompt.trim().isEmpty()) {
            fullPrompt.append(systemPrompt).append("\n\n");
        }
        
        fullPrompt.append(userPrompt);
        
        String requestJson = String.format("""
            {
              "contents": [{
                "parts": [{
                  "text": "%s"
                }]
              }],
              "generationConfig": {
                "temperature": %.2f,
                "maxOutputTokens": %d
              }
            }
            """, 
            fullPrompt.toString().replace("\"", "\\\"").replace("\n", "\\n"),
            temperature,
            maxTokens
        );
        
        return requestJson;
    }
    
    /**
     * Generate structured JSON content using Gemini.
     */
    public String generateStructuredContent(String prompt, String jsonSchema, String systemPrompt) {
        String fullPrompt = buildStructuredPrompt(prompt, jsonSchema, systemPrompt);
        return generateContent(fullPrompt, null);
    }
    
    /**
     * Build a prompt for structured JSON output.
     */
    private String buildStructuredPrompt(String userPrompt, String jsonSchema, String systemPrompt) {
        StringBuilder promptBuilder = new StringBuilder();
        
        if (systemPrompt != null && !systemPrompt.trim().isEmpty()) {
            promptBuilder.append(systemPrompt).append("\n\n");
        }
        
        promptBuilder.append("You must respond with valid JSON that matches this exact schema:\n");
        promptBuilder.append(jsonSchema).append("\n\n");
        promptBuilder.append("User request: ").append(userPrompt).append("\n\n");
        promptBuilder.append("Respond with ONLY the JSON, no additional text or formatting:");
        
        return promptBuilder.toString();
    }
    
    /**
     * Check if the Gemini client is available and properly configured.
     */
    public boolean isAvailable() {
        return httpClient != null && apiKey != null && !apiKey.trim().isEmpty();
    }
    
    /**
     * Get model information.
     */
    public String getModelInfo() {
        return String.format("Model: %s, Temperature: %.2f, Max Tokens: %d", 
                            modelName, temperature, maxTokens);
    }
}
